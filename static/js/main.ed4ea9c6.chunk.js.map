{"version":3,"sources":["cocktail-svgrepo-com.svg","logo192.png","Travel.js","Sitestate.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Travel","photo","destination","country","distance","map","oneTravel","i","class","key","src","height","width","border","travelceva","Sitestate","props","handleClick","setState","on","state","this","className","logo2","logo","alt","Component","App","black","Button","variant","size","onClick","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,kD,gBCA3CD,EAAOC,QAAU,IAA0B,qC,oPC0DrCC,G,MAxCU,CACd,CACEC,MAAM,qGACNC,YAAY,WACZC,QAAQ,QACRC,SAAS,YAEX,CACEH,MAAM,0LACNC,YAAY,UACZC,QAAQ,QACRC,SAAS,YAEX,CACEH,MAAM,4KACNC,YAAY,QACZC,QAAQ,SACRC,SAAS,YAEX,CACEH,MAAM,sFACNC,YAAY,YACZC,QAAQ,cACRC,SAAS,YAEX,CACEH,MAAM,gFACNC,YAAY,SACZC,QAAQ,QACRC,SAAS,YAGX,CACEH,MAAM,uDACNC,YAAY,SACZC,QAAQ,QACRC,SAAS,aAIUC,KAAI,SAACC,EAAWC,GACrC,OACI,yBAAKC,MAAM,cACT,yBAAKA,MAAM,MAAMC,IAAKF,EAAGG,IAAKJ,EAAUL,MAAQU,OAAO,QAAQC,MAAM,QAAQC,OAAO,QACpF,yBAAKJ,IAAKF,GAAID,EAAUJ,aACxB,yBAAKO,IAAKF,GAAID,EAAUH,QAAxB,KACA,yBAAKM,IAAKF,GAAID,EAAUF,SAAxB,UAYOU,EAPI,kBACjB,6BACGd,IClCUe,G,kBA1BX,WAAYC,GAAQ,IAAD,8BACd,4CAAMA,KAJXC,YAAc,WACV,EAAKC,SAAS,CAAEC,IAAK,EAAKC,MAAMD,MAO/B,EAAKC,MAAQ,CACTD,GAAI,EAAKH,MAAMG,IANL,E,sEAYLE,KAAKD,MAAMD,GACzB,OAEE,yBAAKG,UAAU,aACZ,yBAAKZ,IAAKW,KAAKL,MAAMG,GAAII,IAAQC,IAAMF,UAAU,WAAWG,IAAI,c,GApBjDC,c,QC+DTC,E,YA3Db,WAAYX,GAAO,IAAD,8BAChB,4CAAMA,KAKRC,YAAc,WACZ,EAAKC,SAAS,CAAEU,OAAQ,EAAKR,MAAMQ,SALrC,EAAKR,MAAM,CACPQ,OAAO,GAHO,E,sEAUhB,IAAIA,EAAQP,KAAKD,MAAMQ,MAEzB,OACE,yBAAKN,UAAU,OACb,4BAAQA,UAAWM,EAAO,QAAU,SACpC,kBAACC,EAAA,EAAD,CAAQC,QAASF,EAAM,kBAAkB,gBAAkBG,KAAK,KAAKC,QAASX,KAAKJ,aAChFW,EAAO,4BAA4B,qBAG1C,kBAAC,EAAD,CAAWT,GAAIS,IAET,kDAGF,8BAEE,kBAAC,EAAD,a,GA3BUK,IAAMP,WCEJQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ed4ea9c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cocktail-svgrepo-com.5f066de4.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo192.adb065b8.png\";","import React from \"react\";\n\n// Comoponent:\n\n// const Travel = ({ destination, country, distance, photo }) => (\n//   <figure>\n//     {<img src={photo} alt={''} height=\"50%\" border=\"2 px\"/>}\n//     <figcaption>\n//       <h2>{destination}</h2>\n//       <h2>{country}</h2>\n//       <h2>{distance}</h2>\n//     </figcaption>\n//   </figure>\n// );   \n\n// Component that contain an array: \n// Map Function\n\nconst travels = [\n  {\n    photo:\"https://www.kyero.com/guides/wp-content/uploads/2018/12/Tenerife-beautiful-landscape-1800x1200.jpg\",\n    destination:'Tenerife',\n    country:'Spain',\n    distance:'5.239 Km'\n  },\n  {\n    photo:\"https://content.tui.co.uk/adamtui/2016_10/1_13/7ecfce0b-cd33-406d-8003-a69200dfbfaf/TUS_MTE_0803WebOriginalCompressed.jpg?i10c=img.resize(width:1080);img.crop(width:1080%2Cheight:608)\",\n    destination:'Toscana',\n    country:'Italy',\n    distance:'1.781 Km'\n  },\n  {\n    photo:\"https://imgix.bustle.com/uploads/shutterstock/2019/9/19/a49124d9-5f62-47a5-b5ec-8dd3a3066b30-shutterstock-1420728554.jpg?w=970&h=546&fit=crop&crop=faces&auto=format&q=70\",\n    destination:'Paris',\n    country:'France',\n    distance:'2.324 Km'\n  },\n  {\n    photo:\"https://www.holland.com/upload_mm/d/0/7/69550_fullimage_fietsen-amsterdam_1360x.jpg\",\n    destination:'Amsterdam',\n    country:'Netherlands',\n    distance:'2.235 Km'\n  },\n  {\n    photo:\"https://www.princesstravel.ro/wp-content/uploads/2019/05/venetia-960x546.jpeg\",\n    destination:'Venice',\n    country:'Italy',\n    distance:'1.541 Km'\n  },\n\n  {\n    photo:\"https://media.timeout.com/images/105186767/image.jpg\",\n    destination:'Milano',\n    country:'Italy',\n    distance:'1.793 Km'\n  }\n  \n];\nconst Travel = travels.map((oneTravel, i) => {\n  return (\n      <div class='blockImage'> \n        <img class='img' key={i} src={oneTravel.photo}  height=\"200px\" width=\"300px\" border=\"4px\"/>         \n        <div key={i}>{oneTravel.destination}</div>\n        <div key={i}>{oneTravel.country} </div>\n        <div key={i}>{oneTravel.distance} </div>\n       </div>\n  )}\n)\n \nconst travelceva = () => (\n  <div>\n    {Travel}\n  </div>\n)\n\n\nexport default travelceva;","// Sitestate.js\nimport React, {Component} from 'react';\nimport './Sitestate.css';\nimport {Button} from 'react-bootstrap';\nimport logo from './cocktail-svgrepo-com.svg';\nimport logo2 from './logo192.png';\n\nclass Sitestate extends Component {\n    handleClick = () => {\n        this.setState({ on: !this.state.on });\n      };\n    constructor(props) {\n         super(props);\n        //  this.state = {\n        //    on: false\n        //  };\n         this.state = {\n             on: this.props.on \n             \n           };\n      }\n      \n  render() {\n    const light = this.state.on? \"Travel is working\": \"Travel is taking a break\";\n    return (\n    \n      <div className='Sitestate'>\n         <img src={this.props.on? logo2 : logo} className=\"App-logo\" alt=\"logo\" />\n\n        {/* <Button variant=\"success\" size=\"lg\" onClick={this.handleClick}  >\n        {light.toUpperCase()}\n        </Button>   */}\n      </div>\n    );\n  }\n}\n\nexport default Sitestate;","  import React from 'react';\nimport logo from './cocktail-svgrepo-com.svg';\nimport logo2 from './logo192.png';\nimport './App.css';\nimport Travel from \"./Travel\";\nimport Sitestate from './Sitestate';\nimport {Button} from 'react-bootstrap';\n\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n  this.state={\n      black: false\n    }\n  }\n  handleClick = () => {\n    this.setState({ black: !this.state.black });\n  };\n  render(){\n    var black = this.state.black;\n    \n  return (\n    <div className='App'>\n      <header className={black? 'black' : 'white'}>\n      <Button variant={black?'outline-warning':'outline-light'}  size=\"lg\" onClick={this.handleClick}  >\n        {black? \"Travel is taking a break \":'Travel is working'}\n        </Button>  \n\n  <Sitestate on={black}/>\n\n        <h1>\n          Where do I travel?\n        </h1>\n      <body> \n{/* Component that contain an array: */}\n        <Travel/>\n\n\n{/* Comoponent: */}\n        {/* <Travel\n        photo=\"https://www.gannett-cdn.com/presto/2019/09/30/USAT/6fffafb3-aa62-4a01-ba7a-b7545d8b1cb4-GettyImages-1138175909.jpg?width=1080&quality=50\"\n        destination='Tenerife'\n        country='Spain'\n        distance='5.239 Km'\n         /> \n         <Travel\n         photo=\"https://content.tui.co.uk/adamtui/2016_10/1_13/7ecfce0b-cd33-406d-8003-a69200dfbfaf/TUS_MTE_0803WebOriginalCompressed.jpg?i10c=img.resize(width:1080);img.crop(width:1080%2Cheight:608)\"\n         destination='Toscana'\n         country='Italy'\n         distance='1.781 Km'\n         /> */}\n        \n{/* A link */}\n        {/* <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n      </body>\n      </header>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}